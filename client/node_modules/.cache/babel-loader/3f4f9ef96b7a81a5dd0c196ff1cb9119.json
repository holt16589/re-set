{"ast":null,"code":"var _jsxFileName = \"/Users/kevinholt/Documents/CS50/projects/re-set/client/src/containers/Setlists/Setlists.js\";\nimport React, { Component } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport SetlistResult from 'components/SetlistResult/SetlistResult';\nimport { withRouter } from \"react-router\";\nimport 'containers/Setlists/Setlists.css';\nimport Spinner from 'components/UI/Spinner/Spinner';\n\nclass Setlists extends Component {\n  constructor() {\n    super();\n\n    this.scrollHandler = event => {\n      const bottom = event.target.scrollHeight - event.target.scrollTop === event.target.clientHeight;\n\n      if (bottom) {\n        console.log(\"At The Bottom\");\n      }\n    };\n\n    this.state = {\n      artistName: '',\n      loading: false,\n      pageResults: null,\n      nextPageNum: 1\n    };\n  }\n\n  componentDidMount() {\n    let artist = this.props.location.state.artistName;\n\n    if (artist) {\n      this.setState({\n        artistName: artist\n      });\n      this.getSetlists(artist);\n    }\n\n    window.addEventListener('scroll', this.scrollHandler);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleScroll);\n  }\n\n  getSetlists(artistName) {\n    let setlists = null;\n    this.setState({\n      loading: true\n    });\n    fetch('/api/getSetlists/' + artistName + '/' + this.state.nextPageNum).then(response => {\n      setlists = response.json().then(response => {\n        this.setState({\n          pageResults: response.setlist,\n          loading: false\n        });\n        this.setState(prevState => ({\n          pageResults: response.setlist,\n          loading: false,\n          nextPageNum: prevState.nextPageNum + 1\n        }));\n      });\n    }).catch(error => {\n      this.setState({\n        loading: false\n      });\n      console.log(error);\n    });\n  }\n\n  render() {\n    let displayResults = null;\n    let spinner = null;\n\n    if (this.state.loading) {\n      spinner = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 27\n        }\n      });\n    }\n\n    if (this.state.pageResults) {\n      displayResults = Object.keys(this.state.pageResults).map(setKey => {\n        let sets = this.state.pageResults[setKey].sets.set;\n        let setSize = 0;\n\n        if (sets.length > 0) {\n          sets.forEach(function (obj) {\n            setSize += obj.song.length;\n          });\n        }\n\n        return /*#__PURE__*/React.createElement(SetlistResult, {\n          key: setKey,\n          artistName: this.state.pageResults[setKey].artist.name,\n          venueName: this.state.pageResults[setKey].venue.name,\n          cityName: this.state.pageResults[setKey].venue.city.name,\n          countryName: this.state.pageResults[setKey].venue.city.country.name,\n          setDate: this.state.pageResults[setKey].eventDate,\n          setSize: setSize,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }\n        });\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(Container, {\n      className: \"setlists-section\",\n      onScroll: this.scrollHandler,\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 1\n      }\n    }, displayResults, spinner);\n  }\n\n}\n\nexport default withRouter(Setlists);","map":{"version":3,"sources":["/Users/kevinholt/Documents/CS50/projects/re-set/client/src/containers/Setlists/Setlists.js"],"names":["React","Component","Container","Row","Col","SetlistResult","withRouter","Spinner","Setlists","constructor","scrollHandler","event","bottom","target","scrollHeight","scrollTop","clientHeight","console","log","state","artistName","loading","pageResults","nextPageNum","componentDidMount","artist","props","location","setState","getSetlists","window","addEventListener","componentWillUnmount","removeEventListener","handleScroll","setlists","fetch","then","response","json","setlist","prevState","catch","error","render","displayResults","spinner","Object","keys","map","setKey","sets","set","setSize","length","forEach","obj","song","name","venue","city","country","eventDate"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport SetlistResult from 'components/SetlistResult/SetlistResult';\nimport { withRouter } from \"react-router\";\nimport 'containers/Setlists/Setlists.css';\nimport Spinner from 'components/UI/Spinner/Spinner';\n\nclass Setlists extends Component {\n       constructor(){\n                super();\n                this.state = {\n                    artistName: '',\n                    loading: false,\n                    pageResults: null,\n                    nextPageNum: 1\n        }} \n\n        componentDidMount() {  \n            let artist = this.props.location.state.artistName;\n            if(artist){\n                this.setState({artistName: artist});\n                this.getSetlists(artist);\n            }\n            window.addEventListener('scroll', this.scrollHandler);\n\n        }\n\n        componentWillUnmount() {\n            window.removeEventListener('scroll', this.handleScroll);\n        }\n\n        getSetlists(artistName){\n            let setlists = null;\n            this.setState({loading: true});\n                fetch('/api/getSetlists/' + artistName + '/' + this.state.nextPageNum)\n                .then((response => {\n                    setlists = response.json().then(((response)=> {\n                        this.setState({pageResults: response.setlist, loading: false})\n                        this.setState(prevState => ({\n                            pageResults: response.setlist,\n                            loading: false,\n                            nextPageNum: prevState.nextPageNum + 1\n                          }));\n                    }))\n                }))\n                .catch((error => {\n                    this.setState({loading: false});\n                    console.log(error);\n                }))\n        }\n\n        scrollHandler = event => {\n            const bottom = event.target.scrollHeight - event.target.scrollTop === event.target.clientHeight;\n            if (bottom) {\n                console.log(\"At The Bottom\");\n            }\n        }\n        \n        render () {\n            let displayResults = null;\n            let spinner = null;\n            if(this.state.loading){\n                spinner = <Spinner />\n            }\n            if(this.state.pageResults){\n                displayResults =  Object.keys( this.state.pageResults )\n                .map( setKey => {\n                    let sets = this.state.pageResults[setKey].sets.set;\n                    let setSize = 0;\n                    if(sets.length > 0){\n\n                        sets.forEach(function(obj) { \n                            setSize += obj.song.length;\n                        });\n                    }\n                    return (\n                        <SetlistResult key={setKey} \n                        artistName={this.state.pageResults[setKey].artist.name}\n                        venueName={this.state.pageResults[setKey].venue.name}\n                        cityName={this.state.pageResults[setKey].venue.city.name}\n                        countryName={this.state.pageResults[setKey].venue.city.country.name}\n                        setDate={this.state.pageResults[setKey].eventDate}\n                        setSize={setSize}\n                        />\n                        ); \n                      } );\n            }\n        return(\n\n<Container className = \"setlists-section\" onScroll={this.scrollHandler} fluid>\n        {displayResults}\n        {spinner}\n</Container>\n                )       \n        }\n    }\n    \nexport default withRouter(Setlists);"]},"metadata":{},"sourceType":"module"}