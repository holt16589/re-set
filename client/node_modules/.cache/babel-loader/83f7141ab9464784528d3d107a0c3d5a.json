{"ast":null,"code":"var _jsxFileName = \"/Users/kevinholt/Documents/CS50/projects/re-set/client/src/components/ViewSetlist/ViewSetlist.js\";\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router';\nimport { Container, Col, Row } from 'react-bootstrap';\nimport Spinner from 'components/UI/Spinner/Spinner';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faShareAlt } from '@fortawesome/free-solid-svg-icons';\nimport 'components/ViewSetlist/ViewSetlist.css';\nimport taken from 'assets/taken.png';\nimport * as spotifyFunctions from 'spotifyFunctions';\n\nclass ViewSetlist extends Component {\n  constructor(props) {\n    super();\n\n    this.copyUrlHandler = () => {\n      //when \"copy to clickboard\" button is clicked, save the current url to the clipboard\n      this.setState({\n        copied: true\n      });\n      let dummy = document.createElement('input'),\n          text = window.location.href;\n      document.body.appendChild(dummy);\n      dummy.value = text;\n      dummy.select();\n      document.execCommand('copy');\n      document.body.removeChild(dummy);\n    };\n\n    this.saveSetlistHandler = () => {\n      //handle api call to create spotify playlist\n      let uriList = [];\n      let playlistName = this.state.setObject.artist.name + \" at \" + this.state.setObject.venue.name + \", \" + this.state.setObject.eventDate;\n\n      if (this.state.spotify && this.props.userID) {\n        //create array of track URIs for spotify API\n        this.state.spotify.forEach(track => {\n          console.log(track.tracks.items.length);\n\n          if (track.tracks.items.length !== 0) {\n            uriList.push(track.tracks.items[0].uri);\n          }\n        }); //create playlist and add tracks\n\n        spotifyFunctions.createPlaylist(playlistName, this.props.userID).then(playlistObj => {\n          spotifyFunctions.addPlaylistTracks(playlistObj.id, uriList);\n          this.setState({\n            playlistURL: playlistObj.external_urls.spotify\n          });\n          alert(\"Playlist successfully saved!\");\n        }).catch(error => {\n          console.log(error);\n          alert(\"An error occurred while saving your playlist, please try again!\");\n        });\n      }\n    };\n\n    this.state = {\n      setObject: null,\n      loading: false,\n      error: false,\n      fmTracks: null,\n      spotify: null,\n      copied: false,\n      loggedIn: false,\n      playlistURL: ''\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      loggedIn: this.props.loggedIn\n    });\n    let spotifyTracks = [];\n    let setTracks = [];\n    let artistName = '';\n    this.setState({\n      loading: true\n    }); //fetch setlist data from setlist.fm API\n\n    fetch('/api/getSetlist/' + this.props.match.params.id).then(response => {\n      response.json().then(response => {\n        artistName = response.artist.name;\n        this.setState({\n          setObject: response\n        }); //parse the tracks from the response and push to array, check to see if song is found on Spotify\n\n        Object.entries(response.sets.set).forEach(set => {\n          set[1].song.forEach(song => {\n            setTracks.push(song.name);\n            spotifyTracks.push(spotifyFunctions.searchForSong(artistName, song.name));\n          });\n        });\n        Promise.all(spotifyTracks).then(data => {\n          this.setState({\n            fmTracks: setTracks,\n            spotify: data\n          });\n        });\n      }).then(() => {\n        this.setState({\n          loading: false\n        });\n      });\n    }).catch(error => {\n      this.setState({\n        loading: false,\n        error: true\n      });\n      console.log(error);\n    });\n  }\n\n  render() {\n    let displaySetlist = null;\n    let tracklist = null;\n    let setSize = 0;\n    let availableSet = 0;\n    let displayImage = /*#__PURE__*/React.createElement(Spinner, {\n      color: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 26\n      }\n    });\n    let imageUrl = '';\n\n    if (this.state.loading) {\n      displaySetlist = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 26\n        }\n      });\n    }\n\n    if (this.state.setObject) {\n      if (this.state.fmTracks && this.state.spotify) {\n        //search each track from the setlist and identify the first track with an available album art image to display\n        setSize = this.state.fmTracks.length;\n\n        for (let i = 0; i < this.state.spotify.length; i++) {\n          if (this.state.spotify[i].tracks.items.length > 0) {\n            if (this.state.spotify[i].tracks.items[0].album.images.length > 1) {\n              imageUrl = this.state.spotify[i].tracks.items[0].album.images[1].url;\n              break;\n            }\n          }\n        }\n\n        if (imageUrl) {\n          //if album art is available from setlist tracks\n          displayImage = /*#__PURE__*/React.createElement(\"img\", {\n            className: \"displayImg\",\n            src: imageUrl,\n            alt: this.state.setObject.artist.name,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 26\n            }\n          });\n        } else {\n          //if no album art was available, set to default image\n          displayImage = /*#__PURE__*/React.createElement(\"img\", {\n            className: \"displayImg\",\n            src: taken,\n            alt: \"Unavailable\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 27\n            }\n          });\n        } //map list of tracks to li elements and number accordingly\n\n\n        tracklist = /*#__PURE__*/React.createElement(\"ul\", {\n          className: \"songList\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 23\n          }\n        }, this.state.fmTracks.map((item, index) => {\n          if (this.state.spotify[index].tracks.items.length !== 0) {\n            availableSet += 1;\n          }\n\n          return /*#__PURE__*/React.createElement(\"li\", {\n            key: index,\n            className: this.state.spotify[index].tracks.items.length === 0 ? \"notAvailable\" : \"\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 22\n            }\n          }, index + 1, \". \", /*#__PURE__*/React.createElement(\"span\", {\n            className: \"trackLi\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 137\n            }\n          }, item));\n        }));\n      }\n\n      if (this.state.fmTracks && this.state.fmTracks.length > 0) {\n        //if the user is not logged in, direct them to login page to save playlist\n        let playlistBtn = /*#__PURE__*/React.createElement(\"a\", {\n          href: \"http://localhost:8888\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"setButton\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 61\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          className: \"faIcon\",\n          icon: ['fab', 'spotify'],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 11\n          }\n        }), \"Login to Save Playlist\"));\n\n        if (this.state.loggedIn) {\n          //if user is logged in, show button to save setlist\n          playlistBtn = /*#__PURE__*/React.createElement(\"span\", {\n            className: \"setButton\",\n            onClick: this.saveSetlistHandler,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 27\n            }\n          }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n            className: \"faIcon\",\n            icon: ['fab', 'spotify'],\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 8\n            }\n          }), \"Save Playlist\");\n        }\n\n        if (this.state.playlistURL) {\n          //once the playlist is created, change \"Save Setlist\" to \"View Setlist\" and link to spotify playlist URL\n          playlistBtn = /*#__PURE__*/React.createElement(\"a\", {\n            href: this.state.playlistURL,\n            target: \"_blank\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 27\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"setButton\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 76\n            }\n          }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n            className: \"faIcon\",\n            icon: ['fab', 'spotify'],\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 8\n            }\n          }), \"View Playlist\"));\n        } //build component to be displayed with tracklist and set details\n\n\n        displaySetlist = /*#__PURE__*/React.createElement(Container, {\n          className: \"setContainer\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 28\n          }\n        }, /*#__PURE__*/React.createElement(Row, {\n          className: \"setTitle\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"h2\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"titleStyle\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }\n        }, this.state.setObject.artist.name, \" at \", this.state.setObject.venue.name, \", \", this.state.setObject.eventDate))), /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          sm: 12,\n          md: 6,\n          className: \"set-overview\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 7\n          }\n        }, displayImage, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 6\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 6\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"subHead\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 9\n          }\n        }, \"Location: \"), this.state.setObject.venue.city.name, this.state.setObject.venue.city.name && this.state.setObject.venue.city.country.code ? \",\" : \"\", \" \", this.state.setObject.venue.city.country.code), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 6\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"subHead\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 9\n          }\n        }, \"Availability: \"), availableSet, \"/\", setSize, \" tracks found\"), playlistBtn, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"setButton\",\n          onClick: this.copyUrlHandler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          className: \"faIcon\",\n          icon: faShareAlt,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 8\n          }\n        }), this.state.copied ? \"Copied!\" : \"Copy to Clipboard\"))), /*#__PURE__*/React.createElement(Col, {\n          sm: 12,\n          md: 6,\n          className: \"set-details\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 7\n          }\n        }, tracklist)));\n      } else {\n        //if the setlist is empty, display message and ask user to search again.\n        displaySetlist = /*#__PURE__*/React.createElement(Container, {\n          className: \"setContainer\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 28\n          }\n        }, /*#__PURE__*/React.createElement(Row, {\n          className: \"setTitle\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"h2\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"titleStyle\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 15\n          }\n        }, this.state.setObject.artist.name, \" at \", this.state.setObject.venue.name, \", \", this.state.setObject.eventDate))), /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          sm: 12,\n          md: 6,\n          className: \"set-overview\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 9\n          }\n        }, displayImage, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 8\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 8\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"subHead\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 11\n          }\n        }, \"Location: \"), this.state.setObject.venue.city.name, this.state.setObject.venue.city.name && this.state.setObject.venue.city.country.code ? \",\" : \"\", \" \", this.state.setObject.venue.city.country.code), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 8\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"subHead\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 11\n          }\n        }, \"Availability: \"), availableSet, \"/\", setSize, \" tracks found\"))), /*#__PURE__*/React.createElement(Col, {\n          sm: 12,\n          md: 6,\n          className: \"set-details\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 9\n          }\n        }, \"Unfortunately, this setlist is empty. Please try searching again!\")));\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }\n    }, displaySetlist);\n  }\n\n}\n\nexport default withRouter(ViewSetlist);","map":{"version":3,"sources":["/Users/kevinholt/Documents/CS50/projects/re-set/client/src/components/ViewSetlist/ViewSetlist.js"],"names":["React","Component","withRouter","Container","Col","Row","Spinner","FontAwesomeIcon","faShareAlt","taken","spotifyFunctions","ViewSetlist","constructor","props","copyUrlHandler","setState","copied","dummy","document","createElement","text","window","location","href","body","appendChild","value","select","execCommand","removeChild","saveSetlistHandler","uriList","playlistName","state","setObject","artist","name","venue","eventDate","spotify","userID","forEach","track","console","log","tracks","items","length","push","uri","createPlaylist","then","playlistObj","addPlaylistTracks","id","playlistURL","external_urls","alert","catch","error","loading","fmTracks","loggedIn","componentDidMount","spotifyTracks","setTracks","artistName","fetch","match","params","response","json","Object","entries","sets","set","song","searchForSong","Promise","all","data","render","displaySetlist","tracklist","setSize","availableSet","displayImage","imageUrl","i","album","images","url","map","item","index","playlistBtn","city","country","code"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from 'react-router';\nimport { Container, Col, Row } from 'react-bootstrap';\nimport Spinner from 'components/UI/Spinner/Spinner';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faShareAlt } from '@fortawesome/free-solid-svg-icons';\nimport 'components/ViewSetlist/ViewSetlist.css';\nimport taken from 'assets/taken.png';\nimport * as spotifyFunctions from 'spotifyFunctions';\n\nclass ViewSetlist extends Component {\n    constructor(props) {\n      super();\n      this.state = {\n        setObject: null,\n        loading: false,\n        error: false,\n        fmTracks: null,\n        spotify: null,\n        copied: false,\n        loggedIn: false,\n        playlistURL: ''\n}}\n\ncomponentDidMount(){\n  this.setState({loggedIn: this.props.loggedIn});\n  let spotifyTracks = [];\n  let setTracks = [];\n  let artistName = '';\n            this.setState({loading: true});\n            //fetch setlist data from setlist.fm API\n                fetch('/api/getSetlist/' + this.props.match.params.id)\n                .then((response => {\n                    response.json().then(((response)=> {\n                        artistName = response.artist.name;\n                        this.setState({setObject: response});\n                        //parse the tracks from the response and push to array, check to see if song is found on Spotify\n                        Object.entries(response.sets.set).forEach(\n                          (set)=>{\n                            set[1].song.forEach(\n                              (song)=>{\n                                setTracks.push(song.name);\n                                spotifyTracks.push(spotifyFunctions.searchForSong(artistName, song.name));\n                                })\n                              }\n                            )\n                            Promise.all(spotifyTracks).then((data)=>{\n                              this.setState({fmTracks: setTracks, spotify: data})\n                          }\n                        )\n                      \n                    }))\n                    .then(\n                      () =>{\n                        this.setState({loading: false})\n                      }\n                    )\n                }))\n                .catch((error => {\n                    this.setState({loading: false, error: true});\n                    console.log(error);\n                }))\n}\n\ncopyUrlHandler = () => {\n  //when \"copy to clickboard\" button is clicked, save the current url to the clipboard\n  this.setState({copied: true});\n  let dummy = document.createElement('input'),\n  text = window.location.href;\n  document.body.appendChild(dummy);\n  dummy.value = text;\n  dummy.select();\n  document.execCommand('copy');\n  document.body.removeChild(dummy);\n}\n\nsaveSetlistHandler = () => {\n  //handle api call to create spotify playlist\n  let uriList = [];\n  let playlistName = this.state.setObject.artist.name + \" at \" + this.state.setObject.venue.name + \", \" + this.state.setObject.eventDate;\n  if(this.state.spotify && this.props.userID){\n    //create array of track URIs for spotify API\n    this.state.spotify.forEach(\n      (track)=>{\n        console.log(track.tracks.items.length);\n        if(track.tracks.items.length !== 0){\n        uriList.push(track.tracks.items[0].uri);\n        }\n        \n      }\n    );\n    \n    //create playlist and add tracks\n    spotifyFunctions.createPlaylist(playlistName, this.props.userID).then( (playlistObj) => {\n      spotifyFunctions.addPlaylistTracks(playlistObj.id, uriList);\n      this.setState({playlistURL: playlistObj.external_urls.spotify});\n    alert(\"Playlist successfully saved!\");\n    }\n    )\n    .catch((error) => {\n      console.log(error);\n      alert(\"An error occurred while saving your playlist, please try again!\");\n    }\n    )\n   \n  }\n\n}\n\n    render() {\n      let displaySetlist = null;\n      let tracklist = null;\n      let setSize = 0;\n      let availableSet = 0;\n      let displayImage = <Spinner color={2}/>;\n      let imageUrl = '';\n\n      if(this.state.loading){\n        displaySetlist = <Spinner />\n      }\n\n      if(this.state.setObject){\n        \n        if(this.state.fmTracks && this.state.spotify){\n          //search each track from the setlist and identify the first track with an available album art image to display\n          setSize = this.state.fmTracks.length;\n          for(let i = 0; i < this.state.spotify.length; i++){\n            if(this.state.spotify[i].tracks.items.length > 0 ){\n          if(this.state.spotify[i].tracks.items[0].album.images.length > 1){\n            imageUrl = this.state.spotify[i].tracks.items[0].album.images[1].url;\n            break;\n            }\n          }\n          }\n          if(imageUrl){\n            //if album art is available from setlist tracks\n           displayImage= <img className = \"displayImg\" src={imageUrl} alt={this.state.setObject.artist.name}/>;\n          }\n          else{\n            //if no album art was available, set to default image\n            displayImage= <img className = \"displayImg\" src={taken} alt=\"Unavailable\"/>;\n          }\n\n          //map list of tracks to li elements and number accordingly\n          tracklist = <ul className=\"songList\">\n          {\n            this.state.fmTracks.map((item, index) => {\n              if(this.state.spotify[index].tracks.items.length !== 0 ){\n                availableSet +=1;\n              }\n              return <li key={index} className={this.state.spotify[index].tracks.items.length === 0 ? \"notAvailable\" : \"\"}>{index + 1}. <span className=\"trackLi\">{item}</span></li>;\n            }\n            \n            )\n          }\n      </ul>;\n      \n        }\n\n        if(this.state.fmTracks && this.state.fmTracks.length > 0){\n          //if the user is not logged in, direct them to login page to save playlist\n          let playlistBtn = <a href=\"http://localhost:8888\"><span className=\"setButton\">\n          <FontAwesomeIcon className=\"faIcon\" icon={['fab', 'spotify']} />Login to Save Playlist</span></a>\n          if(this.state.loggedIn){\n          //if user is logged in, show button to save setlist\n            playlistBtn = <span className=\"setButton\" onClick={this.saveSetlistHandler}>\n       <FontAwesomeIcon className=\"faIcon\" icon={['fab', 'spotify']} />\n        Save Playlist</span>;\n          }\n          if(this.state.playlistURL){\n            //once the playlist is created, change \"Save Setlist\" to \"View Setlist\" and link to spotify playlist URL\n            playlistBtn = <a href={this.state.playlistURL} target=\"_blank\"><span className=\"setButton\">\n       <FontAwesomeIcon className=\"faIcon\" icon={['fab', 'spotify']} />\n        View Playlist</span></a>;\n          }\n\n          //build component to be displayed with tracklist and set details\n          displaySetlist = <Container className=\"setContainer\">\n        <Row className=\"setTitle\">\n        <h2><span className=\"titleStyle\">{this.state.setObject.artist.name} at {this.state.setObject.venue.name}, {this.state.setObject.eventDate}</span></h2>\n        </Row>\n        <Row>\n      <Col sm={12} md={6} className=\"set-overview\">\n     {displayImage}\n     <div>\n     <p><span className=\"subHead\">Location: </span>{this.state.setObject.venue.city.name}{this.state.setObject.venue.city.name && this.state.setObject.venue.city.country.code ? \",\" : \"\"} {this.state.setObject.venue.city.country.code}</p>\n     <p><span className=\"subHead\">Availability: </span>{availableSet}/{setSize} tracks found</p>\n     {playlistBtn}\n        <span className=\"setButton\" onClick={this.copyUrlHandler}>\n       <FontAwesomeIcon className=\"faIcon\" icon={ faShareAlt } />\n        {this.state.copied ? \"Copied!\" : \"Copy to Clipboard\"}</span>\n     </div>\n\n     </Col>\n      <Col sm={12} md={6} className =\"set-details\">\n      {tracklist}\n  </Col>\n  </Row>\n    </Container>;\n        }\n        else{\n          //if the setlist is empty, display message and ask user to search again.\n          displaySetlist = <Container className=\"setContainer\">\n          <Row className=\"setTitle\">\n          <h2><span className=\"titleStyle\">{this.state.setObject.artist.name} at {this.state.setObject.venue.name}, {this.state.setObject.eventDate}</span></h2>\n          </Row>\n          <Row>\n        <Col sm={12} md={6} className=\"set-overview\">\n       {displayImage}\n       <div>\n       <p><span className=\"subHead\">Location: </span>{this.state.setObject.venue.city.name}{this.state.setObject.venue.city.name && this.state.setObject.venue.city.country.code ? \",\" : \"\"} {this.state.setObject.venue.city.country.code}</p>\n       <p><span className=\"subHead\">Availability: </span>{availableSet}/{setSize} tracks found</p>\n       </div>\n  \n       </Col>\n        <Col sm={12} md={6} className =\"set-details\">\n        Unfortunately, this setlist is empty. Please try searching again!\n    </Col>\n    </Row>\n      </Container>;\n        }\n        \n      }\n      \n\n      return (\n        <React.Fragment>\n          {displaySetlist}\n          </React.Fragment>\n      );\n    }\n  }\n\nexport default withRouter(ViewSetlist);"]},"metadata":{},"sourceType":"module"}