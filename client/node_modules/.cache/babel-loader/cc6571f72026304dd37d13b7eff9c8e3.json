{"ast":null,"code":"var _jsxFileName = \"/Users/kevinholt/Documents/CS50/projects/re-set/client/src/components/ViewSetlist/ViewSetlist.js\";\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router';\nimport { Container, Col, Row } from 'react-bootstrap';\nimport Spinner from 'components/UI/Spinner/Spinner';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faShareAlt } from '@fortawesome/free-solid-svg-icons';\nimport 'components/ViewSetlist/ViewSetlist.css';\nimport taken from 'assets/taken.png';\nimport * as spotifyFunctions from 'spotifyFunctions';\n\nclass ViewSetlist extends Component {\n  constructor(props) {\n    super();\n\n    this.copyUrlHandler = () => {\n      this.setState({\n        copied: true\n      });\n      let dummy = document.createElement('input'),\n          text = window.location.href;\n      document.body.appendChild(dummy);\n      dummy.value = text;\n      dummy.select();\n      document.execCommand('copy');\n      document.body.removeChild(dummy);\n    };\n\n    this.saveSetlistHandler = () => {//handle api call to save this setlist to a spotify playlist\n    };\n\n    this.state = {\n      setObject: null,\n      loading: false,\n      error: false,\n      fmTracks: null,\n      spotify: null,\n      copied: false\n    };\n  }\n\n  componentDidMount() {\n    let spotifyTracks = [];\n    let setTracks = [];\n    let artistName = '';\n    this.setState({\n      loading: true\n    });\n    fetch('/api/getSetlist/' + this.props.match.params.id).then(response => {\n      response.json().then(response => {\n        artistName = response.artist.name;\n        this.setState({\n          setObject: response\n        });\n        Object.entries(response.sets.set).forEach(set => {\n          set[1].song.forEach(song => {\n            setTracks.push(song.name);\n            spotifyTracks.push(spotifyFunctions.searchForSong(artistName, song.name));\n          });\n        });\n        Promise.all(spotifyTracks).then(data => {\n          console.log(data);\n          this.setState({\n            fmTracks: setTracks,\n            spotify: data\n          });\n        });\n      }).then(() => {\n        this.setState({\n          loading: false\n        });\n      });\n    }).catch(error => {\n      this.setState({\n        loading: false,\n        error: true\n      });\n      console.log(error);\n    });\n  }\n\n  render() {\n    let displaySetlist = null;\n    let tracklist = null;\n    let setSize = 0;\n    let availableSet = 0;\n    let displayImage = /*#__PURE__*/React.createElement(Spinner, {\n      color: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 26\n      }\n    });\n    let imageUrl = '';\n\n    if (this.state.loading) {\n      displaySetlist = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 26\n        }\n      });\n    }\n\n    if (this.state.setObject) {\n      if (this.state.fmTracks && this.state.spotify) {\n        setSize = this.state.fmTracks.length;\n\n        for (let i = 0; i < this.state.spotify.length; i++) {\n          if (this.state.spotify[i].tracks.items.length > 0) {\n            if (this.state.spotify[i].tracks.items[0].album.images.length > 1) {\n              imageUrl = this.state.spotify[i].tracks.items[0].album.images[1].url;\n              break;\n            }\n          }\n        }\n\n        if (imageUrl) {\n          displayImage = /*#__PURE__*/React.createElement(\"img\", {\n            className: \"displayImg\",\n            src: imageUrl,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 26\n            }\n          });\n        } else {\n          displayImage = /*#__PURE__*/React.createElement(\"img\", {\n            className: \"displayImg\",\n            src: taken,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 27\n            }\n          });\n        }\n\n        tracklist = /*#__PURE__*/React.createElement(\"ul\", {\n          className: \"songList\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 23\n          }\n        }, this.state.fmTracks.map((item, index) => {\n          if (this.state.spotify[index].tracks.items.length !== 0) {\n            availableSet += 1;\n          }\n\n          return /*#__PURE__*/React.createElement(\"li\", {\n            key: index,\n            className: this.state.spotify[index].tracks.items.length === 0 ? \"notAvailable\" : \"\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 22\n            }\n          }, index + 1, \". \", /*#__PURE__*/React.createElement(\"span\", {\n            className: \"trackLi\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 137\n            }\n          }, item));\n        }));\n      }\n\n      if (this.state.fmTracks.length > 0) {\n        displaySetlist = /*#__PURE__*/React.createElement(Container, {\n          className: \"setContainer\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 28\n          }\n        }, /*#__PURE__*/React.createElement(Row, {\n          className: \"setTitle\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"h2\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"titleStyle\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }\n        }, this.state.setObject.artist.name, \" at \", this.state.setObject.venue.name, \", \", this.state.setObject.eventDate))), /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          sm: 12,\n          md: 6,\n          className: \"set-overview\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 7\n          }\n        }, displayImage, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 6\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 6\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"subHead\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 9\n          }\n        }, \"Location: \"), this.state.setObject.venue.city.name, this.state.setObject.venue.city.name ? \",\" : \" \", \" \", this.state.setObject.venue.city.country.code), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 6\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"subHead\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 9\n          }\n        }, \"Availability: \"), availableSet, \"/\", setSize, \" tracks found\"), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"setButton\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 6\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          className: \"faIcon\",\n          icon: ['fab', 'spotify'],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 8\n          }\n        }), \"Generate Playlist\"), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"setButton\",\n          onClick: this.copyUrlHandler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          className: \"faIcon\",\n          icon: faShareAlt,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 8\n          }\n        }), this.state.copied ? \"Copied!\" : \"Copy to Clipboard\"))), /*#__PURE__*/React.createElement(Col, {\n          sm: 12,\n          md: 6,\n          className: \"set-details\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 7\n          }\n        }, tracklist)));\n      } else {\n        displaySetlist = /*#__PURE__*/React.createElement(Container, {\n          className: \"setContainer\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 28\n          }\n        }, /*#__PURE__*/React.createElement(Row, {\n          className: \"setTitle\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"h2\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"titleStyle\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 15\n          }\n        }, this.state.setObject.artist.name, \" at \", this.state.setObject.venue.name, \", \", this.state.setObject.eventDate))), /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          sm: 12,\n          md: 6,\n          className: \"set-overview\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 9\n          }\n        }, displayImage, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 8\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 8\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"subHead\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 11\n          }\n        }, \"Location: \"), this.state.setObject.venue.city.name, \", \", this.state.setObject.venue.city.country.code), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 8\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"subHead\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 11\n          }\n        }, \"Availability: \"), availableSet, \"/\", setSize, \" tracks found\"), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"setButton\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 8\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          className: \"faIcon\",\n          icon: ['fab', 'spotify'],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 10\n          }\n        }), \"Generate Playlist\"), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"setButton\",\n          onClick: this.copyUrlHandler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          className: \"faIcon\",\n          icon: faShareAlt,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 10\n          }\n        }), this.state.copied ? \"Copied!\" : \"Copy to Clipboard\"))), /*#__PURE__*/React.createElement(Col, {\n          sm: 12,\n          md: 6,\n          className: \"set-details\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 9\n          }\n        })));\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }\n    }, displaySetlist);\n  }\n\n}\n\nexport default withRouter(ViewSetlist);","map":{"version":3,"sources":["/Users/kevinholt/Documents/CS50/projects/re-set/client/src/components/ViewSetlist/ViewSetlist.js"],"names":["React","Component","withRouter","Container","Col","Row","Spinner","FontAwesomeIcon","faShareAlt","taken","spotifyFunctions","ViewSetlist","constructor","props","copyUrlHandler","setState","copied","dummy","document","createElement","text","window","location","href","body","appendChild","value","select","execCommand","removeChild","saveSetlistHandler","state","setObject","loading","error","fmTracks","spotify","componentDidMount","spotifyTracks","setTracks","artistName","fetch","match","params","id","then","response","json","artist","name","Object","entries","sets","set","forEach","song","push","searchForSong","Promise","all","data","console","log","catch","render","displaySetlist","tracklist","setSize","availableSet","displayImage","imageUrl","length","i","tracks","items","album","images","url","map","item","index","venue","eventDate","city","country","code"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from 'react-router';\nimport { Container, Col, Row } from 'react-bootstrap';\nimport Spinner from 'components/UI/Spinner/Spinner';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faShareAlt } from '@fortawesome/free-solid-svg-icons';\nimport 'components/ViewSetlist/ViewSetlist.css';\nimport taken from 'assets/taken.png';\nimport * as spotifyFunctions from 'spotifyFunctions';\n\nclass ViewSetlist extends Component {\n    constructor(props) {\n      super();\n      this.state = {\n        setObject: null,\n        loading: false,\n        error: false,\n        fmTracks: null,\n        spotify: null,\n        copied: false\n}}\n\ncomponentDidMount(){\n  let spotifyTracks = [];\n  let setTracks = [];\n  let artistName = '';\n            this.setState({loading: true});\n                fetch('/api/getSetlist/' + this.props.match.params.id)\n                .then((response => {\n                    response.json().then(((response)=> {\n                        artistName = response.artist.name;\n                        this.setState({setObject: response});\n                        Object.entries(response.sets.set).forEach(\n                          (set)=>{\n                            set[1].song.forEach(\n                              (song)=>{\n                                setTracks.push(song.name);\n                                spotifyTracks.push(spotifyFunctions.searchForSong(artistName, song.name));\n                                })\n                              }\n                            )\n                            Promise.all(spotifyTracks).then((data)=>{\n                              console.log(data);\n                              this.setState({fmTracks: setTracks, spotify: data})\n                          }\n                        )\n                      \n                    }))\n                    .then(\n                      () =>{\n                        this.setState({loading: false})\n                      }\n                    )\n                }))\n                .catch((error => {\n                    this.setState({loading: false, error: true});\n                    console.log(error);\n                }))\n}\n\ncopyUrlHandler = () => {\n  this.setState({copied: true});\n  let dummy = document.createElement('input'),\n  text = window.location.href;\n  document.body.appendChild(dummy);\n  dummy.value = text;\n  dummy.select();\n  document.execCommand('copy');\n  document.body.removeChild(dummy);\n}\n\nsaveSetlistHandler = () => {\n  //handle api call to save this setlist to a spotify playlist\n}\n\n    render() {\n      let displaySetlist = null;\n      let tracklist = null;\n      let setSize = 0;\n      let availableSet = 0;\n      let displayImage = <Spinner color={2}/>;\n      let imageUrl = '';\n\n      if(this.state.loading){\n        displaySetlist = <Spinner />\n      }\n\n      if(this.state.setObject){\n\n        if(this.state.fmTracks && this.state.spotify){\n          setSize = this.state.fmTracks.length;\n          for(let i = 0; i < this.state.spotify.length; i++){\n            if(this.state.spotify[i].tracks.items.length > 0 ){\n          if(this.state.spotify[i].tracks.items[0].album.images.length > 1){\n            imageUrl = this.state.spotify[i].tracks.items[0].album.images[1].url;\n            break;\n            }\n          }\n          }\n          if(imageUrl){\n           displayImage= <img className = \"displayImg\" src={imageUrl}/>;\n          }\n          else{\n            displayImage= <img className = \"displayImg\" src={taken}/>;\n          }\n\n          tracklist = <ul className=\"songList\">\n          {\n            this.state.fmTracks.map((item, index) => {\n              if(this.state.spotify[index].tracks.items.length !== 0 ){\n                availableSet +=1;\n              }\n              return <li key={index} className={this.state.spotify[index].tracks.items.length === 0 ? \"notAvailable\" : \"\"}>{index + 1}. <span className=\"trackLi\">{item}</span></li>;\n            }\n            \n            )\n          }\n      </ul>;\n      \n        }\n\n        if(this.state.fmTracks.length > 0){\n          displaySetlist = <Container className=\"setContainer\">\n        <Row className=\"setTitle\">\n        <h2><span className=\"titleStyle\">{this.state.setObject.artist.name} at {this.state.setObject.venue.name}, {this.state.setObject.eventDate}</span></h2>\n        </Row>\n        <Row>\n      <Col sm={12} md={6} className=\"set-overview\">\n     {displayImage}\n     <div>\n     <p><span className=\"subHead\">Location: </span>{this.state.setObject.venue.city.name}{this.state.setObject.venue.city.name ? \",\" : \" \"} {this.state.setObject.venue.city.country.code}</p>\n     <p><span className=\"subHead\">Availability: </span>{availableSet}/{setSize} tracks found</p>\n     <span className=\"setButton\">\n       <FontAwesomeIcon className=\"faIcon\" icon={['fab', 'spotify']} />\n        Generate Playlist</span>\n\n        <span className=\"setButton\" onClick={this.copyUrlHandler}>\n       <FontAwesomeIcon className=\"faIcon\" icon={ faShareAlt } />\n        {this.state.copied ? \"Copied!\" : \"Copy to Clipboard\"}</span>\n     </div>\n\n     </Col>\n      <Col sm={12} md={6} className =\"set-details\">\n      {tracklist}\n  </Col>\n  </Row>\n    </Container>;\n        }\n        else{\n          displaySetlist = <Container className=\"setContainer\">\n          <Row className=\"setTitle\">\n          <h2><span className=\"titleStyle\">{this.state.setObject.artist.name} at {this.state.setObject.venue.name}, {this.state.setObject.eventDate}</span></h2>\n          </Row>\n          <Row>\n        <Col sm={12} md={6} className=\"set-overview\">\n       {displayImage}\n       <div>\n       <p><span className=\"subHead\">Location: </span>{this.state.setObject.venue.city.name}, {this.state.setObject.venue.city.country.code}</p>\n       <p><span className=\"subHead\">Availability: </span>{availableSet}/{setSize} tracks found</p>\n       <span className=\"setButton\">\n         <FontAwesomeIcon className=\"faIcon\" icon={['fab', 'spotify']} />\n          Generate Playlist</span>\n  \n          <span className=\"setButton\" onClick={this.copyUrlHandler}>\n         <FontAwesomeIcon className=\"faIcon\" icon={ faShareAlt } />\n          {this.state.copied ? \"Copied!\" : \"Copy to Clipboard\"}</span>\n       </div>\n  \n       </Col>\n        <Col sm={12} md={6} className =\"set-details\">\n        \n    </Col>\n    </Row>\n      </Container>;\n        }\n        \n      }\n      \n\n      return (\n        <React.Fragment>\n          {displaySetlist}\n          </React.Fragment>\n      );\n    }\n  }\n\nexport default withRouter(ViewSetlist);"]},"metadata":{},"sourceType":"module"}