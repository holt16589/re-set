{"ast":null,"code":"var _jsxFileName = \"/Users/kevinholt/Documents/CS50/projects/re-set/client/src/containers/TopArtists/TopArtists.js\";\nimport React, { Component } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { withRouter } from 'react-router';\nimport ScrollUp from 'components/UI/ScrollUp/ScrollUp';\nimport taken from 'assets/taken.png';\nimport 'containers/SearchResults/SearchResults.css';\nimport Spinner from 'components/UI/Spinner/Spinner';\nimport * as spotifyFunctions from 'spotifyFunctions';\n\nclass TopArtists extends Component {\n  constructor() {\n    super();\n\n    this.scrollHandler = () => {\n      //checks if the user has scrolled dowbn at all\n      if (window.pageYOffset === 0) {\n        this.setState({\n          showScrollBtn: false\n        });\n      } else {\n        this.setState({\n          showScrollBtn: true\n        });\n      }\n    };\n\n    this.artistClickHandler = (name, uri) => {\n      //if an artist is clicked, direct user to the setlists component for that artist\n      this.props.history.push({\n        pathname: '/setlists',\n        state: {\n          artistName: name,\n          artistUri: uri\n        }\n      });\n    };\n\n    this.state = {\n      loading: false,\n      result: null,\n      showScrollBtn: false\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      loading: true\n    }); //search spotify for artists given the user search query\n\n    spotifyFunctions.getTopArtists().then(response => {\n      let searchResult = response.items;\n      this.setState({\n        loading: false,\n        result: searchResult\n      });\n    }).catch(error => {\n      this.setState({\n        loading: false\n      });\n      console.log(error);\n    });\n    window.addEventListener('scroll', this.scrollHandler);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.scrollHandler);\n  }\n\n  render() {\n    let displayResults = '';\n    let displayScrollBtn = null;\n\n    if (this.state.result) {\n      //map artist response object to individual artists to render to DOM\n      displayResults = Object.keys(this.state.result).map(artistKey => {\n        if (this.state.result[artistKey].images.length > 2) {\n          return /*#__PURE__*/React.createElement(Row, {\n            key: artistKey,\n            className: \"mb-4\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(Col, {\n            md: {\n              span: 8,\n              offset: 2\n            },\n            className: \"resultBody mb-4 my-auto\",\n            onClick: () => this.artistClickHandler(this.state.result[artistKey].name, this.state.result[artistKey].uri),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"img\", {\n            className: \"roundedImg\",\n            src: this.state.result[artistKey].images[1].url,\n            alt: this.state.result[artistKey].name,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 25\n            }\n          }), /*#__PURE__*/React.createElement(\"h3\", {\n            className: \"mt-3 noselect\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 25\n            }\n          }, this.state.result[artistKey].name)));\n        } else {\n          return /*#__PURE__*/React.createElement(Row, {\n            key: artistKey,\n            className: \"mb-4\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(Col, {\n            md: {\n              span: 8,\n              offset: 2\n            },\n            className: \"resultBody mb-4 my-auto\",\n            onClick: () => this.artistClickHandler(this.state.result[artistKey].name, this.state.result[artistKey].uri),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"img\", {\n            className: \"roundedImg\",\n            src: taken,\n            alt: this.state.result[artistKey].name,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 25\n            }\n          }), /*#__PURE__*/React.createElement(\"h3\", {\n            className: \"mt-3\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"artistName\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 46\n            }\n          }, this.state.result[artistKey].name))));\n        }\n      }); //if there were no artists return in the search\n\n      if (Object.keys(this.state.result).length === 0) {\n        displayResults = /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 42\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          md: {\n            span: 8,\n            offset: 2\n          },\n          className: \"resultBody mb-4 my-auto\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"h3\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 29\n          }\n        }, \"No matching artists were found, please try searching again!\")));\n      }\n    }\n\n    if (this.state.loading) {\n      displayResults = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 34\n        }\n      });\n    }\n\n    if (this.state.showScrollBtn) {\n      displayScrollBtn = /*#__PURE__*/React.createElement(ScrollUp, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 34\n        }\n      });\n    } else {\n      displayScrollBtn = null;\n    }\n\n    return /*#__PURE__*/React.createElement(Container, {\n      className: \"results-section mb-5\",\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"mb-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"resultsTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 36\n      }\n    }, \"Your Top Spotify Artists\")), displayResults, displayScrollBtn);\n  }\n\n}\n\nexport default withRouter(TopArtists);","map":{"version":3,"sources":["/Users/kevinholt/Documents/CS50/projects/re-set/client/src/containers/TopArtists/TopArtists.js"],"names":["React","Component","Container","Row","Col","withRouter","ScrollUp","taken","Spinner","spotifyFunctions","TopArtists","constructor","scrollHandler","window","pageYOffset","setState","showScrollBtn","artistClickHandler","name","uri","props","history","push","pathname","state","artistName","artistUri","loading","result","componentDidMount","getTopArtists","then","response","searchResult","items","catch","error","console","log","addEventListener","componentWillUnmount","removeEventListener","render","displayResults","displayScrollBtn","Object","keys","map","artistKey","images","length","span","offset","url"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { withRouter } from 'react-router';\nimport ScrollUp from 'components/UI/ScrollUp/ScrollUp';\nimport taken from 'assets/taken.png';\nimport 'containers/SearchResults/SearchResults.css';\nimport Spinner from 'components/UI/Spinner/Spinner';\nimport * as spotifyFunctions from 'spotifyFunctions';\n\nclass TopArtists extends Component {\n       constructor(){\n                super();\n                this.state={\n                    loading: false,\n                    result: null,\n                    showScrollBtn: false\n                }   \n            }\n        \n            componentDidMount(){\n                this.setState({loading: true});\n                //search spotify for artists given the user search query\n                spotifyFunctions.getTopArtists()\n              .then((response => {\n                let searchResult = response.items;\n                this.setState({loading: false, result: searchResult});\n              }))   \n              .catch((error => {\n                this.setState({loading: false});\n                console.log(error);\n              }));\n\n                window.addEventListener('scroll', this.scrollHandler)\n            }\n\n            componentWillUnmount() {\n              window.removeEventListener('scroll', this.scrollHandler);\n          }\n\n            scrollHandler = () => {\n              //checks if the user has scrolled dowbn at all\n              if(window.pageYOffset === 0){\n                this.setState({showScrollBtn: false});\n            }\n            else{\n              this.setState({showScrollBtn: true});\n            }\n            }\n\n            artistClickHandler = (name, uri) => {\n              //if an artist is clicked, direct user to the setlists component for that artist\n              this.props.history.push({\n                pathname: '/setlists',\n                state: { artistName: name, artistUri: uri}\n              })\n            }\n\n\n        render () {\n            let displayResults = '';\n            let displayScrollBtn = null;\n            if(this.state.result){\n              //map artist response object to individual artists to render to DOM\n                displayResults =  Object.keys( this.state.result )\n                .map( artistKey => {\n                  if(this.state.result[artistKey].images.length > 2){\n                    return (\n                      <Row key={artistKey} className=\"mb-4\">\n                        <Col md={{ span: 8, offset: 2 }} className=\"resultBody mb-4 my-auto\" onClick={() => this.artistClickHandler(this.state.result[artistKey].name, this.state.result[artistKey].uri)}>\n                        <img className=\"roundedImg\" src={this.state.result[artistKey].images[1].url} alt={this.state.result[artistKey].name}/>\n                        <h3 className=\"mt-3 noselect\">{this.state.result[artistKey].name}</h3>\n                        </Col>\n                        </Row>\n                        ); \n                  }\n                  else{\n                    return (\n                      <Row key={artistKey} className=\"mb-4\">\n                        <Col md={{ span: 8, offset: 2 }} className=\"resultBody mb-4 my-auto\" onClick={() => this.artistClickHandler(this.state.result[artistKey].name, this.state.result[artistKey].uri)}>\n                        <img className=\"roundedImg\" src={taken} alt={this.state.result[artistKey].name}/>\n                        <h3 className=\"mt-3\"><span className=\"artistName\">{this.state.result[artistKey].name}</span></h3>\n                        </Col>\n                        </Row>\n                        ); \n                  }\n            \n                      } );\n                      //if there were no artists return in the search\n                      if(Object.keys( this.state.result ).length === 0){\n                        displayResults = <Row>\n                          <Col md={{ span: 8, offset: 2 }} className=\"resultBody mb-4 my-auto\">\n                            <h3>No matching artists were found, please try searching again!</h3>\n                            </Col>\n                        </Row>\n                      }\n            }\n            if( this.state.loading ){\n                displayResults = <Spinner />\n            }\n\n            if( this.state.showScrollBtn ){\n              displayScrollBtn = <ScrollUp />;\n            }\n            else{\n              displayScrollBtn = null;\n            }\n\n        return(\n            <Container className = \"results-section mb-5\" fluid>\n              <h1 className=\"mb-5\"><span className=\"resultsTitle\">Your Top Spotify Artists</span></h1>\n              {displayResults}\n                {displayScrollBtn}\n                </Container>\n                )       \n        }\n    }\n    \nexport default withRouter(TopArtists);"]},"metadata":{},"sourceType":"module"}