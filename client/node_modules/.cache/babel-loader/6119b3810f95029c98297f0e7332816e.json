{"ast":null,"code":"var _jsxFileName = \"/Users/kevinholt/Documents/CS50/projects/re-set/client/src/components/ViewSetlist/ViewSetlist.js\";\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router';\nimport { Container, Col, Row } from 'react-bootstrap';\nimport Spinner from 'components/UI/Spinner/Spinner';\nimport 'components/ViewSetlist/ViewSetlist.css';\nimport taken from 'assets/taken.png';\nimport * as spotifyFunctions from 'spotifyFunctions';\n\nclass ViewSetlist extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      setObject: null,\n      loading: false,\n      error: false,\n      fmTracks: null,\n      spotify: null\n    };\n  }\n\n  componentDidMount() {\n    let spotifyTracks = [];\n    let setTracks = [];\n    let artistName = '';\n    this.setState({\n      loading: true\n    });\n    fetch('/api/getSetlist/' + this.props.match.params.id).then(response => {\n      response.json().then(response => {\n        artistName = response.artist.name;\n        this.setState({\n          setObject: response\n        }); // console.log(response);\n\n        Object.entries(response.sets.set).forEach(set => {\n          set[1].song.forEach(song => {\n            setTracks.push(song.name); // console.log(song.name);\n\n            spotifyTracks.push(spotifyFunctions.searchForSong(artistName, song.name));\n          });\n        });\n        Promise.all(spotifyTracks).then(data => {\n          console.log(data);\n          this.setState({\n            fmTracks: setTracks,\n            spotify: data\n          });\n        });\n      }).then(() => {\n        this.setState({\n          loading: false\n        });\n      });\n    }).catch(error => {\n      this.setState({\n        loading: false,\n        error: true\n      });\n      console.log(error);\n    });\n  }\n\n  render() {\n    let displaySetlist = null;\n    let tracklist = null;\n    let setSize = 0;\n    let availableSet = 0;\n    let displayImage = null;\n\n    if (this.state.loading) {\n      displaySetlist = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 26\n        }\n      });\n    }\n\n    if (this.state.setObject) {\n      if (this.state.fmTracks && this.state.spotify) {\n        for (let i = 0; i < this.state.spotify.length; i++) {\n          if (this.state.spotify[i].tracks.items.length > 0) {\n            if (this.state.spotify[i].tracks.items[0].album.images.length > 1) {\n              displayImage = this.state.spotify[i].tracks.items[0].album.images[1].url;\n              break;\n            }\n          }\n        }\n\n        tracklist = /*#__PURE__*/React.createElement(\"ul\", {\n          className: \"songList\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 23\n          }\n        }, this.state.fmTracks.map((item, index) => {\n          return /*#__PURE__*/React.createElement(\"li\", {\n            key: index,\n            className: this.state.spotify[index].tracks.items.length === 0 ? \"notAvailable\" : \"\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 22\n            }\n          }, index + 1, \". \", /*#__PURE__*/React.createElement(\"span\", {\n            className: \"trackLi\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 137\n            }\n          }, item));\n        }));\n      }\n\n      displaySetlist = /*#__PURE__*/React.createElement(Container, {\n        className: \"setContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 26\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        className: \"setTitle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"titleStyle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }\n      }, this.state.setObject.artist.name, \" at \", this.state.setObject.venue.name, \", \", this.state.setObject.eventDate))), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        sm: 12,\n        md: 6,\n        className: \"set-overview\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        className: \"displayImg\",\n        src: displayImage ? displayImage : taken,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 6\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        sm: 12,\n        md: 6,\n        className: \"set-details\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 7\n        }\n      }, tracklist)));\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    }, displaySetlist);\n  }\n\n}\n\nexport default withRouter(ViewSetlist);","map":{"version":3,"sources":["/Users/kevinholt/Documents/CS50/projects/re-set/client/src/components/ViewSetlist/ViewSetlist.js"],"names":["React","Component","withRouter","Container","Col","Row","Spinner","taken","spotifyFunctions","ViewSetlist","constructor","props","state","setObject","loading","error","fmTracks","spotify","componentDidMount","spotifyTracks","setTracks","artistName","setState","fetch","match","params","id","then","response","json","artist","name","Object","entries","sets","set","forEach","song","push","searchForSong","Promise","all","data","console","log","catch","render","displaySetlist","tracklist","setSize","availableSet","displayImage","i","length","tracks","items","album","images","url","map","item","index","venue","eventDate"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from 'react-router';\nimport { Container, Col, Row } from 'react-bootstrap';\nimport Spinner from 'components/UI/Spinner/Spinner';\nimport 'components/ViewSetlist/ViewSetlist.css';\nimport taken from 'assets/taken.png';\nimport * as spotifyFunctions from 'spotifyFunctions';\n\nclass ViewSetlist extends Component {\n    constructor(props) {\n      super();\n      this.state = {\n        setObject: null,\n        loading: false,\n        error: false,\n        fmTracks: null,\n        spotify: null\n}}\n\ncomponentDidMount(){\n  let spotifyTracks = [];\n  let setTracks = [];\n  let artistName = '';\n            this.setState({loading: true});\n                fetch('/api/getSetlist/' + this.props.match.params.id)\n                .then((response => {\n                    response.json().then(((response)=> {\n                        artistName = response.artist.name;\n                        this.setState({setObject: response});\n                        // console.log(response);\n                        Object.entries(response.sets.set).forEach(\n                          (set)=>{\n                            set[1].song.forEach(\n                              (song)=>{\n                                setTracks.push(song.name);\n                                // console.log(song.name);\n                                spotifyTracks.push(spotifyFunctions.searchForSong(artistName, song.name));\n                                })\n                              }\n                            )\n                            Promise.all(spotifyTracks).then((data)=>{\n                              console.log(data);\n                              this.setState({fmTracks: setTracks, spotify: data})\n                          }\n                        )\n                      \n                    }))\n                    .then(\n                      () =>{\n                        this.setState({loading: false})\n                      }\n                    )\n                }))\n                .catch((error => {\n                    this.setState({loading: false, error: true});\n                    console.log(error);\n                }))\n}\n\n    render() {\n      let displaySetlist = null;\n      let tracklist = null;\n      let setSize = 0;\n      let availableSet = 0;\n      let displayImage = null;\n\n      if(this.state.loading){\n        displaySetlist = <Spinner />\n      }\n\n      if(this.state.setObject){\n\n        if(this.state.fmTracks && this.state.spotify){\n          for(let i = 0; i < this.state.spotify.length; i++){\n            if(this.state.spotify[i].tracks.items.length > 0 ){\n          if(this.state.spotify[i].tracks.items[0].album.images.length > 1){\n            displayImage = this.state.spotify[i].tracks.items[0].album.images[1].url;\n            break;\n            }\n          }\n          \n          }\n\n          tracklist = <ul className=\"songList\">\n          {\n            this.state.fmTracks.map((item, index) => {\n              return <li key={index} className={this.state.spotify[index].tracks.items.length === 0 ? \"notAvailable\" : \"\"}>{index + 1}. <span className=\"trackLi\">{item}</span></li>;\n            }\n            \n            )\n          }\n      </ul>;\n      \n        }\n\n\n        displaySetlist = <Container className=\"setContainer\">\n        <Row className=\"setTitle\">\n        <h2><span className=\"titleStyle\">{this.state.setObject.artist.name} at {this.state.setObject.venue.name}, {this.state.setObject.eventDate}</span></h2>\n        </Row>\n        <Row>\n      <Col sm={12} md={6} className=\"set-overview\">\n     <img className = \"displayImg\" src={displayImage ? displayImage : taken}/>\n     </Col>\n      <Col sm={12} md={6} className =\"set-details\">\n      {tracklist}\n  </Col>\n  </Row>\n    </Container>;\n      }\n      \n\n      return (\n        <React.Fragment>\n          {displaySetlist}\n          </React.Fragment>\n      );\n    }\n  }\n\nexport default withRouter(ViewSetlist);"]},"metadata":{},"sourceType":"module"}