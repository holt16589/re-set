{"ast":null,"code":"var _jsxFileName = \"/Users/kevinholt/Documents/CS50/projects/re-set/client/src/containers/Setlists/Setlists.js\";\nimport React, { Component } from 'react';\nimport { Container } from 'react-bootstrap';\nimport SetlistResult from 'components/SetlistResult/SetlistResult';\nimport ScrollUp from 'components/UI/ScrollUp/ScrollUp';\nimport { withRouter } from \"react-router\";\nimport 'containers/Setlists/Setlists.css';\nimport Spinner from 'components/UI/Spinner/Spinner';\n\nclass Setlists extends Component {\n  constructor() {\n    super();\n\n    this.scrollHandler = () => {\n      //http://blog.sodhanalibrary.com/2016/08/detect-when-user-scrolls-to-bottom-of.html\n      const windowHeight = \"innerHeight\" in window ? window.innerHeight : document.documentElement.offsetHeight;\n      const body = document.body;\n      const html = document.documentElement;\n      const docHeight = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n      const windowBottom = windowHeight + window.pageYOffset;\n\n      if (windowBottom >= docHeight) {\n        this.setState({\n          loading: true\n        });\n        this.getSetlists(this.state.artistName);\n      }\n\n      if (window.pageYOffset === 0) {\n        this.setState({\n          showScrollBtn: false\n        });\n      } else {\n        this.setState({\n          showScrollBtn: true\n        });\n      }\n    };\n\n    this.setlistClickHandler = setObject => {\n      this.props.history.push({\n        pathname: '/setlist/' + setObject.id,\n        state: {\n          set: setObject\n        }\n      });\n    };\n\n    this.state = {\n      artistName: '',\n      loading: false,\n      pageResults: [],\n      nextPageNum: 1,\n      showScrollBtn: false\n    };\n  }\n\n  componentDidMount() {\n    let artist = this.props.location.state.artistName;\n\n    if (artist) {\n      this.setState({\n        artistName: artist\n      });\n      this.getSetlists(artist);\n    }\n\n    window.addEventListener('scroll', this.scrollHandler);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.scrollHandler);\n  }\n\n  getSetlists(artistName) {\n    let setlists = null;\n    this.setState({\n      loading: true\n    });\n    fetch('/api/getSetlists/' + artistName + '/' + this.state.nextPageNum).then(response => {\n      setlists = response.json().then(response => {\n        this.setState(prevState => ({\n          pageResults: [...prevState.pageResults, ...response.setlist],\n          loading: false,\n          nextPageNum: prevState.nextPageNum + 1\n        }));\n      });\n    }).catch(error => {\n      this.setState({\n        loading: false\n      });\n      console.log(error);\n    });\n  }\n\n  render() {\n    let displayResults = null;\n    let spinner = null;\n    let displayScrollBtn = null;\n\n    if (this.state.loading) {\n      spinner = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 27\n        }\n      });\n    }\n\n    if (this.state.showScrollBtn) {\n      displayScrollBtn = /*#__PURE__*/React.createElement(ScrollUp, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 36\n        }\n      });\n    } else {\n      displayScrollBtn = null;\n    }\n\n    if (this.state.pageResults) {\n      displayResults = Object.keys(this.state.pageResults).map(setKey => {\n        let sets = this.state.pageResults[setKey].sets.set;\n        let setSize = 0;\n\n        if (sets.length > 0) {\n          sets.forEach(function (obj) {\n            setSize += obj.song.length;\n          });\n        }\n\n        return /*#__PURE__*/React.createElement(SetlistResult, {\n          key: setKey,\n          artistName: this.state.pageResults[setKey].artist.name,\n          venueName: this.state.pageResults[setKey].venue.name,\n          cityName: this.state.pageResults[setKey].venue.city.name,\n          countryName: this.state.pageResults[setKey].venue.city.country.name,\n          setDate: this.state.pageResults[setKey].eventDate,\n          setSize: setSize,\n          onClick: () => this.setlistClickHandler(this.state.pageResults[setKey], setSize),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }\n        });\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(Container, {\n      className: \"setlists-section\",\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 1\n      }\n    }, displayResults, spinner, displayScrollBtn);\n  }\n\n}\n\nexport default withRouter(Setlists);","map":{"version":3,"sources":["/Users/kevinholt/Documents/CS50/projects/re-set/client/src/containers/Setlists/Setlists.js"],"names":["React","Component","Container","SetlistResult","ScrollUp","withRouter","Spinner","Setlists","constructor","scrollHandler","windowHeight","window","innerHeight","document","documentElement","offsetHeight","body","html","docHeight","Math","max","scrollHeight","clientHeight","windowBottom","pageYOffset","setState","loading","getSetlists","state","artistName","showScrollBtn","setlistClickHandler","setObject","props","history","push","pathname","id","set","pageResults","nextPageNum","componentDidMount","artist","location","addEventListener","componentWillUnmount","removeEventListener","setlists","fetch","then","response","json","prevState","setlist","catch","error","console","log","render","displayResults","spinner","displayScrollBtn","Object","keys","map","setKey","sets","setSize","length","forEach","obj","song","name","venue","city","country","eventDate"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Container } from 'react-bootstrap';\nimport SetlistResult from 'components/SetlistResult/SetlistResult';\nimport ScrollUp from 'components/UI/ScrollUp/ScrollUp';\nimport { withRouter } from \"react-router\";\nimport 'containers/Setlists/Setlists.css';\nimport Spinner from 'components/UI/Spinner/Spinner';\n\nclass Setlists extends Component {\n       constructor(){\n                super();\n                this.state = {\n                    artistName: '',\n                    loading: false,\n                    pageResults: [],\n                    nextPageNum: 1,\n                    showScrollBtn: false\n        }} \n\n        componentDidMount() {  \n            let artist = this.props.location.state.artistName;\n            if(artist){\n                this.setState({artistName: artist});\n                this.getSetlists(artist);\n            }\n            window.addEventListener('scroll', this.scrollHandler);\n        }\n\n        componentWillUnmount() {\n            window.removeEventListener('scroll', this.scrollHandler);\n        }\n\n        getSetlists(artistName){\n            let setlists = null;\n            this.setState({loading: true});\n                fetch('/api/getSetlists/' + artistName + '/' + this.state.nextPageNum)\n                .then((response => {\n                    setlists = response.json().then(((response)=> {\n                        this.setState(prevState => ({\n                            pageResults: [...prevState.pageResults, ...response.setlist],\n                            loading: false,\n                            nextPageNum: prevState.nextPageNum + 1\n                          }));\n                    }))\n                }))\n                .catch((error => {\n                    this.setState({loading: false});\n                    console.log(error);\n                }))\n        }\n\n        scrollHandler = () => {\n            //http://blog.sodhanalibrary.com/2016/08/detect-when-user-scrolls-to-bottom-of.html\n            const windowHeight = \"innerHeight\" in window ? window.innerHeight : document.documentElement.offsetHeight;\n            const body = document.body;\n            const html = document.documentElement;\n            const docHeight = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight,  html.scrollHeight, html.offsetHeight);\n            const windowBottom = windowHeight + window.pageYOffset;\n            if (windowBottom >= docHeight) {\n                this.setState({loading: true});\n                this.getSetlists(this.state.artistName);\n            }\n            if(window.pageYOffset === 0){\n                      this.setState({showScrollBtn: false});\n                  }\n                  else{\n                    this.setState({showScrollBtn: true});\n                  }\n        }\n\n        setlistClickHandler = (setObject) => {\n            this.props.history.push({\n                pathname: '/setlist/' + setObject.id,\n                state: { set: setObject }\n              })\n        }\n        \n        render () {\n            let displayResults = null;\n            let spinner = null;\n            let displayScrollBtn = null;\n            if(this.state.loading){\n                spinner = <Spinner />\n            }\n            if( this.state.showScrollBtn ){\n                displayScrollBtn = <ScrollUp />;\n              }\n              else{\n                displayScrollBtn = null;\n              }\n\n            if(this.state.pageResults){\n                displayResults =  Object.keys( this.state.pageResults )\n                .map( setKey => {\n                    let sets = this.state.pageResults[setKey].sets.set;\n                    let setSize = 0;\n                    if(sets.length > 0){\n                        sets.forEach(function(obj) { \n                            setSize += obj.song.length;\n                        });\n                    }\n\n                    return (\n                        <SetlistResult key={setKey} \n                        artistName={this.state.pageResults[setKey].artist.name}\n                        venueName={this.state.pageResults[setKey].venue.name}\n                        cityName={this.state.pageResults[setKey].venue.city.name}\n                        countryName={this.state.pageResults[setKey].venue.city.country.name}\n                        setDate={this.state.pageResults[setKey].eventDate}\n                        setSize={setSize}\n                        onClick={() => this.setlistClickHandler(this.state.pageResults[setKey], setSize)}\n                        />\n                        ); \n                      } );\n            }\n        return(\n\n<Container className = \"setlists-section\" fluid>\n        {displayResults}\n        {spinner}\n        {displayScrollBtn}\n</Container>\n                )       \n        }\n    }\n    \nexport default withRouter(Setlists);"]},"metadata":{},"sourceType":"module"}